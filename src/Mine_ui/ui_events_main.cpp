// This file was generated by SquareLine Studio
// SquareLine Studio version: SquareLine Studio 1.3.0
// LVGL version: 8.3.6
// Project name: Test

#include "ui_main.h"
#include "WiFi.h"
#include "bits/basic_string.h"
#include "ui_events_main.h"
#include "main.h"
#include "squerline_ui/ui_events.h"
static GifClass gifClass;
enum eCalulator
{
    devision,
    multiplacation,
    subtracliton,
    addtion,
    none,
};
bool solved = false;

struct sCalulator
{
    eCalulator type = none;
    String value;
};
String calculateecl;
struct sCalulator match[50];
// int match[50];
int i = 0;

void addnumber(String number)
{
    if (i >= 49)
    {
        /////
    }
    else
    {
        if (solved)
        {
            lv_textarea_set_text(ui_calculator_textbox, number.c_str());
            solved = false;
        }
        else
        {
            lv_textarea_add_text(ui_calculator_textbox, number.c_str());
            match[i].value += number;
            calculateecl += number;
        }
    }
}
void addsinghst(String number, eCalulator Calulator)
{
    if (i == 50)
    {
        lv_textarea_set_text(ui_calculator_textbox, "max numbers reacherd");
    }
    else
    {
        if (solved)
        {
            lv_textarea_set_text(ui_calculator_textbox, number.c_str());
            solved = false;
        }
        else if (match[i - 1].type == none)
        {
            lv_textarea_add_text(ui_calculator_textbox, number.c_str());
            match[i].type = Calulator;
            i++;
            match[i].value += number;
            i++;
            calculateecl += Calulator;
        }
    }
}
void button0(lv_event_t *e)
{
    lv_event_code_t event_code = lv_event_get_code(e);
    lv_obj_t *target = lv_event_get_target(e);
    if (event_code == LV_EVENT_CLICKED)
    {
        lv_textarea_add_text(ui_calculator_textbox, "0");
        match[i].value += "0";
    }
}
void button1(lv_event_t *e)
{
    lv_event_code_t event_code = lv_event_get_code(e);
    lv_obj_t *target = lv_event_get_target(e);
    if (event_code == LV_EVENT_CLICKED)
    {
        addnumber("1");
    }
}
void button2(lv_event_t *e)
{
    lv_event_code_t event_code = lv_event_get_code(e);
    lv_obj_t *target = lv_event_get_target(e);
    if (event_code == LV_EVENT_CLICKED)
    {
        addnumber("2");
    }
}
void button3(lv_event_t *e)
{
    lv_event_code_t event_code = lv_event_get_code(e);
    lv_obj_t *target = lv_event_get_target(e);
    if (event_code == LV_EVENT_CLICKED)
    {
        addnumber("3");
    }
}
void button4(lv_event_t *e)
{
    lv_event_code_t event_code = lv_event_get_code(e);
    lv_obj_t *target = lv_event_get_target(e);
    if (event_code == LV_EVENT_CLICKED)
    {
        addnumber("4");
    }
}
void button5(lv_event_t *e)
{
    lv_event_code_t event_code = lv_event_get_code(e);
    lv_obj_t *target = lv_event_get_target(e);
    if (event_code == LV_EVENT_CLICKED)
    {
        addnumber("5");
    }
}
void button6(lv_event_t *e)
{
    lv_event_code_t event_code = lv_event_get_code(e);
    lv_obj_t *target = lv_event_get_target(e);
    if (event_code == LV_EVENT_CLICKED)
    {
        addnumber("6");
    }
}
void button7(lv_event_t *e)
{
    lv_event_code_t event_code = lv_event_get_code(e);
    lv_obj_t *target = lv_event_get_target(e);
    if (event_code == LV_EVENT_CLICKED)
    {
        addnumber("7");
    }
}
void button8(lv_event_t *e)
{
    lv_event_code_t event_code = lv_event_get_code(e);
    lv_obj_t *target = lv_event_get_target(e);
    if (event_code == LV_EVENT_CLICKED)
    {
        addnumber("8");
    }
}
void button9(lv_event_t *e)
{
    lv_event_code_t event_code = lv_event_get_code(e);
    lv_obj_t *target = lv_event_get_target(e);
    if (event_code == LV_EVENT_CLICKED)
    {
        addnumber("9");
    }
}
void devide(lv_event_t *e)
{
    lv_event_code_t event_code = lv_event_get_code(e);
    lv_obj_t *target = lv_event_get_target(e);
    if (event_code == LV_EVENT_CLICKED)
    {
        addsinghst("/", devision);
    }
}
void multiplecation(lv_event_t *e)
{
    lv_event_code_t event_code = lv_event_get_code(e);
    lv_obj_t *target = lv_event_get_target(e);
    if (event_code == LV_EVENT_CLICKED)
    {
        addsinghst("*", multiplacation);
    }
}
void subtraction(lv_event_t *e)
{
    lv_event_code_t event_code = lv_event_get_code(e);
    lv_obj_t *target = lv_event_get_target(e);
    if (event_code == LV_EVENT_CLICKED)
    {
        addsinghst("-", subtracliton);
    }
}
void adding(lv_event_t *e)
{
    lv_event_code_t event_code = lv_event_get_code(e);
    lv_obj_t *target = lv_event_get_target(e);
    if (event_code == LV_EVENT_CLICKED)
    {
        addsinghst("+", addtion);
    }
}
void removeone(lv_event_t *e)
{
    lv_event_code_t event_code = lv_event_get_code(e);
    lv_obj_t *target = lv_event_get_target(e);
    if (event_code == LV_EVENT_CLICKED)
    {

        if (i >= 1)
        {
            const char *text;
            // lv_textarea_add_text(ui_calculator_textbox, "+");
            text = lv_textarea_get_text(ui_calculator_textbox);
            std::string modifiedString(text);
            // Remove the last character
            modifiedString.pop_back();
            lv_textarea_set_text(ui_calculator_textbox, modifiedString.c_str());
            match[i].type = none;
            i--;
        }
        else
        {
            lv_textarea_set_text(ui_calculator_textbox, "");
        }
    }
}
void calculate(lv_event_t *e)
{
    lv_event_code_t event_code = lv_event_get_code(e);
    lv_obj_t *target = lv_event_get_target(e);
    if (event_code == LV_EVENT_CLICKED)
    {
        solved = true;
        int arrNUmbers[50];
        int answer;
        for (int arrpos = 0; arrpos < i; arrpos++)
        {
            if (match[arrpos].value == "*")
            {
            }
            if (match[arrpos].value == "/")
            {
            }
            if (match[arrpos].value == "+")
            {
            }
            if (match[arrpos].value == "-")
            {
            }
        }
    }
}
void reload_WiFi(lv_event_t *e)
{
    //network_Nubers = WiFi.scanNetworks(true);
    //File gifFile = SD.open("/wifiloading.gif", "r");
    //gd_GIF *gif = gifClass.gd_open_gif(&gifFile);
    //uint8_t *buf = (uint8_t *)malloc(gif->width * gif->height);
    //int16_t x1 = (gfx->width() - gif->width) / 2;
    //int16_t y1 = (gfx->height() - gif->height) / 2;
    //int32_t res;
    //uint32_t duration = 0, remain = 0;
    //while (1)
    //{
    //    res = gifClass.gd_get_frame(gif, buf);
    //    if (res < 0)
    //    {
    //        Serial.println(F("ERROR: gd_get_frame(gif, buf) failed!"));
    //        break;
    //    }
    //    else if (res == 0)
    //    {
    //        Serial.println(F("rewind gif"));
    //        gifClass.gd_rewind(gif);
    //        if (!(WiFi.scanComplete() < 0))
    //        {
    //            network_Nubers = WiFi.scanComplete();
    //            Serial.println(WiFi.SSID(0).c_str());
    //            break;
    //        }
    //    }
    //    else
    //    {
    //        gfx->drawIndexedBitmap(x1, y1, buf, gif->palette->colors, gif->width, gif->height);
    //    }
    //}
}
